//////////////////////////
// VISUAL STUDIO CODE
//////////////////////////

    ---------------------------------------
    VSCODE - COMMANDS
    ---------------------------------------
    alt+click                                               Multiple insertion points
    ctrl+k, ctrl+u                                          Convert to uppercase
    ctrl+k, ctrl+l                                          Convert to lowercase
    shift+ctrl+RIGHT                                        Select word by word
    ctrl+shift+[                                            Collapses region
    ctrl+shift+]                                            Expands region
    shift+alt+F                                             Formats document (language based)

    // MAC OS
    ⌘+⌥+[                                                 Collapses region
    ⌘+⌥+]                                                 Expands region
    ⌘+⌥+↑                                                 Inserts cursor above selection
    ⌥+shift+↑                                              Duplicates line up
    ⌥+shift+↓                                              Duplicates line down
    ⌥+shift+drag mouse                                     Column selection
    ⌥+scroll mouse                                         Fast scroll
    ⌘+t                                                    Go to fle, Go to symbol in Workspace (#symbol-name)
    ⌘+d                                                    Quick open file
    ⌘+left click (over link)                               Open a symbol
    ⌘+⌥+left click (over link)                            Open a symbol on the side
    ./directory/**/*/{*.filetype,*.filetype,*.filetype}     Search multiple file types

//////////////////////////
// SASS
//////////////////////////

    ---------------------------------------
    SASS - TERNARY OPERATOR
    ---------------------------------------
    padding: if($condition,  0 prem(3px) 0 0, 0 0 0 prem(3px));

    ---------------------------------------
    SASS - NOT
    ---------------------------------------
    padding-#{not($value)}: 0;

    ---------------------------------------
    SASS - VARIABLE EXIST
    ---------------------------------------
    @if(variable-exists(static-content) == true) { }

//////////////////////////
// MAC OS
//////////////////////////

    ---------------------------------------
    MAC OS - COMMANDS
    ---------------------------------------
    ⌘+w                             closes active window
    ⌘+y                             quick view on finder
    ⌘+,                             current application preferences
    ⌘+⌥+m                           minimizes all current application windows
    ⌘+⌥+click(desktop)              Shows desktop
    ⌘+F3                            Shows desktop
    ⌘+space                         Shows Finder
    ⌘+l                             Browser focus on address bar
    ⌘+tab                           Switch between applications
    ⌘+⌥+d                           Shows/hides dock menu
    ⌘+`                             Switch between application windows
    crl+tab                         Switch between application tabs
    ⌘+⌥+escape                      Force quit applications
    ⌘+q                             Quit application
    ⌘+shift+q                       Shutdown
    ⌘+ctrl+q                        Lock computer
    ⌘+shift+.                       Show hidden files
    ⌘+shift+4                       Takes a screenshot
    selection + mouse drag + ⌥      Copies selected text
    ⌘+⌥+j                           Shows developer tools (Chrome)
    ⌘+r                             Refresh (Chrome)
    ⌘+shift+r                       Refresh clearing cache (Chrome)
    ⌘+del                           Deletes a file
    ⌘+shift+del                     Deletes a file permanently


//////////////////////////
// COMMAND LINE
//////////////////////////

    ------------------------------------
    Basic commands
    ------------------------------------
    $ ls                                                    list files, will list files inside directories If path is provided
    $ ls -a                                                 list files, including hidden directories
    $ ls -l                                                 list files long list mode
    $ ls | wc -l                                            gets number of contained files (not hidden)
    $ ls  */**/*.<ext>                                      gets all file extension type recursively
    $ cd ..                                                 change directory
    $ touch                                                 creates file
    $ any letter + [tab]                                    complete With existing files directories
    $ mkdir                                                 creates directory
    $ rm                                                    removes file
    $ rm -rf                                                removes directories and content within rm
    $ clear                                                 clears the console
    $ history                                               outputs terminal history
    $ ctrl + a                                              Go to beginning of line
    $ ctrl + b                                              Go to end of line
    $ ps ea                                                 List processes currently running
    $ sudo lsof -PiTCP -sTCP:LISTEN                         List of ports opened
    $ pwd -p                                                Displays current working directory physical path
    $ pwd -l                                                Displays current working directory logical path
    $ rm -rf <dir>                                          Remove specific dir and its contents
    $ find . -name "*.<file ext>" -type f -delete           Removes recursively all specified files
    $ curl -u <userName>:<Identity-token> <url-to-file>     Loads file on terminal
    $ echo -n '<userName>:<Identity-token>' |  base64       Transform credentials into base64 format (.npmrc auth)
    $ sudo shutdown -h now                                  Shutdowns computer (mac OS)
    $ echo -n 'string-to-convert' |  base64                 Creates base64 encoded string

    ---------------------------------------
    NODE
    ---------------------------------------
    $ node                                  Node command Line
    $ ctrl + c (twice)                      Exits CLI
    $ node <filename>                       Executes file
    $ export <<VAR NAME>>=<<VAR VALUE>>     Exports global ENV variable
                                            (ex. export DATABASEURL=http://databaseurl/)
    $ taskkill -F -IM node.exe              Kill server process (windows)
    $ sudo lsof -i :<PORT>                  Finds process ID in port
    $ kill -9 <<Process ID>>                Kills process
    $ rm -rf node_modules                   Removes all installed modules // clean project installation
    $ rm -rf .yarn/cache                    Removes yarn cache // clean project installation
    $ rm -rf .cache                         Removes cache // clean project installation
    $ rm -rf .git                           Removes git
    $ git rm -r --cached .                  Removes git cached files


    ---------------------------------------
    NPM
    ---------------------------------------
    $ npm install                           installs npm package.json dependencies
    $ npm install <<package>>@<<version>>   installs npm package specific version
    $ npm uninstall <<package>>             uninstalls npm package
    $ npm prune                             Updates package.json installed packages list
    $ npm list <<package name>>             Package name + version
    $ npm list -g                           List Global packages
    $ npm list --depth=0                    Lists manually installed packages
    $ npm cache clear --force               Clears NPM cache
    $ npm uninstall -g <<package>>          uninstall package globally
    $ npm outdated                          list outdated packages
    $ npm update <<package>>                update package
    $ npm start                             Starts application from package.json start property key
    $ npm run <<script>>                    Runs installed script property of a package.json
    $ npm link                              To create a symbolic link module
    $ npm link <<package>>                  To link to a symbolic module created with 'npm link'
    $ npm unlink                            unlink a project from a symbolic one
    $ npm run lint -- --fix                 Fix linting problems automatically
    $ npm cache clean                       Cleans NPM cache

    ------------------------------------
    NPM - Debugging external library:
    ------------------------------------
    $ yarn build // Root directory of library to check
    $ yarn pack // yarn command
    $ npm pack --pack-destination . // Node command, Root directory, will generate a <<library>>.tgz in that folder.

    Add the local file path from the generated .tgz file to the package.json file of the app you are working on

    "dependencies": {
        "<<library>>": "file:<<relative path to library>>",
    },

    Install and run

    ---------------------------------------
    YARN
    ---------------------------------------
    $ yarn --version                                            Get Yarn version
    $ yarn versions                                             Versions of Yarn, Node.js, and its dependencies
    $ brew upgrade yarn                                         Update Yarn via Homebrew
    $ yarn add <package-name>                                   installs the latest version of the package.
    $ yarn add <package-name>@<version>                         installs the specific version of the package.
    $ yarn global add <package-name>                            Adds global package
    $ yarn global remove <package-name>                         Removes global package
    $ npm config set registry https://registry.npmjs.org/       Change registry for packages installation
    $ yarn set version stable                                   Updates yarn to latest version
    $ yarn set version berry                                    Updates yarn to latest version
    $ yarn set version 1.22.19                                  Updates yarn classic to latest version (1.22.19)
    $ yarn cache clean                                          Cleans Yarn cache
    $ yarn dlx @yarnpkg/sdks vscode                             Installs VScode support for Yarn > 2
    ---------------------------------------
    NVM
    ---------------------------------------
    $ nvm install <<node version>>          Installs specific Node version
    $ nvm ls-remote                         Lists available Node versions
    $ nvm ls                                List installed Node versions
    $ nvm ls available                      Lists available Node version (windows)
    $ nvm use <<node version>>              Switches to specific Node version
    $ nvm alias default <<node version>>    Sets the default node version

    ---------------------------------------
    GULP
    ---------------------------------------
    $ gulp --tasks                      List tasks
    $ gulp --tasks-simple               List tasks first level

    ---------------------------------------
    TYPESCRIPT
    ---------------------------------------
    $ tsc <filename.ts>                     compiles to .js file
    $ tsc --init                            creates config .json file for compiling all .ts files found running $ tsc
    $ tsc -w                                compile and watch for changes
    $tsc <file.ts> --watch                  watch particular file
    $ tsc -t <JS VERSION: Ex. ES5>          compile to target JS version
    $tsc --outFile <file.js> <files.ts>     compile to one single file plus files that should be bundled
    $tsc <file.ts> --outFile <file.js>      compile to and from one single file
    $tsc --experimentalDecorators           Allows use of experimental decorators

    ---------------------------------------
    APP-SCAFFOLDING
    ---------------------------------------
    $ npx create-react-app .                Creates in place a React Webpack based app // https://create-react-app.dev/
    $ yarn create next-app .                Creates in place a Nextjs Webpack based app // https://nextjs.org/docs/pages/api-reference/create-next-app
    $ yarn create vite .                    Creates in place a Vite based app // https://github.com/vitejs/vite/tree/main/packages/create-vite

    ---------------------------------------
    HOMEBREW
    ---------------------------------------
    $ brew search <program name>            search a program to install
    $ brew install cask <program name>      installs a program with UI
    $ brew install <program name>           installs a program without UI (ex. NodeJS)
    $ brew list                             List installed apps
    $ brew list cask                        List installed apps with UI

    ---------------------------------------
    SSH KEYS
    ---------------------------------------
    $ eval "$(ssh-agent -s)"                                // init SSH agent
    $ ssh-keygen -t ed25519 -C "youremail@email.com"        // Generate SSH key (id_ed25519 as file name)
    $ ssh-keygen -t rsa -b 2048 -C "youremail@email.com"    // 2048-bit RSA
    $ ssh-add ~/.ssh/id_ed25519                             // Add generated key to SSH agent
    $ ssh-add -l -E sha256                                  // Check SSH added key fingerprint (must match GitHub one)


//////////////////////////
// VUE
/////////////////////////

    ------------------------------------
    Basic commands
    ------------------------------------
    $ npm init vue@2.0.3                        initialize new Vue project using VITE
    $ yarn global add  @vue/cli@4.5.4           global Vue CLI installation for Vue2/Vue3
    $ vue init <template-name> <project-name>   Initialize vue project using vue-cli (ue init webpack project-name)
                                                https://vuejs-templates.github.io/webpack
    $ vue create <project-name>                 Initialize vue project using @vue/cli
    $ vue upgrade                               Upgrades vue related packages.


//////////////////////////
// GIT
//////////////////////////

    ---------------------------------------
    GIT - BASIC COMMANDS
    ---------------------------------------
    $ git config --list --show-origin                                                   Show config information (logins credentials, etc)
    $ git                                                                               Initialize repository
    $ git status                                                                        Shows status
    $ git add .                                                                         Add all files
    $ git add <file>                                                                    Adds specified file
    $ git commit -m "message"                                                           Commits file with specified message (In present tense)
    $ git commit --amend                                                                Edits last commit messages
    $ git log                                                                           gets repository history
    $ q                                                                                 exits gits viewer
    $ git checkout                                                                      checkout
    $ git checkout <commit id>                                                          checkouts particular commit
    $ git checkout <commit id> <file path>                                              checkouts file from a particular commit
    $ git checkout <commit hash> <--file path>                                          checkouts file from a particular hash
    $ git checkout master                                                               checkouts master
    $ git revert --no-commit <commit id>..HEAD                                          Reverts repository to specified commit,
                                                                                        without deleting other commits
    $ git diff                                                                          Shows differences
    $ git diff <file-name>                                                              Show differences for a specific file
    $ git diff -w                                                                       Show differences ignoring white spaces
    $ git remote add origin [remote repo Url]                                           Adds remote Url repository to local repo
    $ git remote set-url origin [remote repo Url]                                       Changes remote Url
    $ git remote -v                                                                     Verifies remote repo Url
    $ git push origin master                                                            Pushes branch
    $ git push --set-upstream origin master                                             Sets upstream origin
    $ git push origin -u <branch name ex. master>                                       Pushes all changes to empty remote branch
    $ git branch <branch-name>                                                          Creates a new local branch
    $ git config --get user.name                                                        Gets user name
    $ git config --get user.email                                                       Gets user e-mail
    $ git reset HEAD~1 --soft                                                           Remove commits and stage them
    $ git reset --hard <commit name>                                                    Resets to the specified commit
    $ git push --force                                                                  Forces changes
    $ git push --no-verify                                                              To not run tests while pushing
    $ git rm <file-name> --cached                                                       Removes cached files from tracking
    $ git push origin <<branch name>> --force-with-lease                                Safe pushing
    $ git remote set-url origin <git URL>                                               Change remote origin
    $ git rebase -i HEAD~3                                                              Interactive rebase with no remote
    $ git merge --no-commit <branch name>                                               Merge branch and stash changes
    $ git branch -a                                                                     List all branches
    $ git log                                                                           List all commits
    $ git remote add <new-remote-name> https://remote-url/<path-to-repository>.git      Adds new remote
    $ git remote show                                                                   Shows wxisting local remotes
    $ git merge <branch-to-merge>                                                       Merges branch into the current working branch
    $ git push <remote-local-name> <source-branch>:<destination-branch>                 Pushes branch into another
    $ git branch --delete <branch-to-delete>                                            Deletes local branch
    $ git config --get remote.origin.url                                                Gets remote origin url

    ------------------------------------
    GIT - Rebasing ignoring spaces
    ------------------------------------
    $ git checkout [Destination Branch]
    $ git pull --all
    $ git checkout [source Branch]
    $ git rebase -i -Xignore-space-change origin/[Destination Branch]
    $ git push -f origin [source Branch]
    --> Pull request


    git diff --stat --cached origin/master

    ------------------------------------
    GIT - Init config
    ------------------------------------
    $git config --global push.default simple
    $git config --global pull.rebase true

    --------------------------------------
    GIT - UPDATING FROM 'MASTER'
    ---------------------------------------
    $git checkout [destination branch]
    $git merge master

    press "i"
    write your merge message
    press "esc"
    write ":wq"
    then press enter

    --------------------------------------
    GIT - FEATURE BRANCH UPDATE
    ---------------------------------------
    First STOP GRUNT!!!

    $ git checkout develop
    Checking out files: 100% (1054/1054), done.
    Switched to branch 'develop'
    Your branch is up-to-date with 'origin/develop'.

    $ git pull
    Current branch develop is up to date.

    $ git checkout feature/PMI-2657-arabic-rtl-front-end-changes
    Switched to branch 'feature/PMI-2657-arabic-rtl-front-end-change
    Your branch is up-to-date with 'origin/feature/PMI-2657-arabic-rtl-front-end-changes'.

    $ git rebase (Bhimal recommend merge)
    --> conflicts will appear
    --> use "resolve using mine" when files haven't been modified  -> $ git rebase --skip
    --> use "add" when resolving conflicts -> $ git rebase --continue

    $ git push --force-with-lease

    // after rebase
    $ git push -f

    --------------------------------------
    GIT - RENAMING FILES
    ---------------------------------------
    * files are renamed using the git mv command

    ------------------------------------
    GIT - REMOVE COMMITS FROM QUEUE
    ------------------------------------
    $ git reset HEAD --hard (option 1)
    $ git reset HEAD~ (option 2)
    $ git fetch origin
        $ git reset --hard origin/<<origin branch>> (option 3)

    ------------------------------------
    GIT - LIST/VIEW/APPLY STASHES
    ------------------------------------
    $ git stash list // list stashes
    $ git stash show -p // last stash contents
    $ git stash show -p stash@{stash number} // specific stash contents
    $ git stash drop stash@{n} // removes specific stash
    $ git stash drop // removes all stashes

    $ git stash <message>                           To stash with message
    $ git stash list                                list stashes
    $ git pop <stash id>                            Applies specific stash
    $ git stash apply stash@{<stash-index>}         Applies specific stash, 0 based index

    ------------------------------------
    GIT - Solving conflicts after Pull Request
    ------------------------------------
    $ git branch // list of branches -r for remote ones
    $ git checkout development // or whatever the origin branch was
    $ git pull // to update source branch
    $ git checkout -b <<local fix branch name>> // create a temporary branch from the updated source one
    $ git checkout <<conflict branch>>
    $ git merge <<local fix branch name>>

    // solve conflicts
    $ git add <<conflicted file>>
    $ git commit -m "<<fix commit name>>"
    $ git push

    ------------------------------------
    ------------------------------------
    rename the local branch to the new name
    $ git branch -m <old_name> <new_name>

    delete the old branch on remote - where <remote> is eg. origin
    $ git push origin --delete <old_name>

    push the new branch to remote
    $ git push origin <new_name>

    ------------------------------------
    GIT - Changing commit description
    ------------------------------------
    // For remote commits
    Get a list of the 3 most recent commits
    $ git rebase -i HEAD~3
    To change initial commit
    $ git rebase -i --root

    -> Replace 'pick' with 'reword' before commit id number.
    -> Save commit list file
    -> Change the commit message
    $ git --push force


    // For local commits
    $git commit --amend
    press "i"
    Edit the commit message
    press "esc"
    write ":wq"
    then press enter

    ------------------------------------
    GIT - Un-tracking already committed files
    ------------------------------------

    * git rm -r --cached .
    * git add .
    * git commit -m "<<commit message>>"

    ------------------------------------
    GIT - Reset to remote (Discard everything)
    ------------------------------------
    * git fetch origin // will get remote (origin)
    * git reset --hard origin/master // discards any changes and set as remote branch

    ------------------------------------
    GIT - Flow A
    ------------------------------------
    * Create local branch from remote.
    * Make just one commit containing all changes.
    * In case of several commits squash them into one.
    * Switch to remote origin branch, pull for changes.
    * Switch to local branch then rebase
      $ git rebase <<remote origin branch>>
    * Push creating a remote from the branch
      $ push -u origin <<branch name>>

    ------------------------------------
    GIT - Flow B
    ------------------------------------
    * Create remote branch from remote.
    * Make local commits.
    * Squash commits.
      $ git rebase <<local origin branch>> -i. ex. $ git rebase develop
      Make sure the first commit says "pick" and change the rest from "pick" to "squash". -- This will squash each commit into the previous commit, which will continue until every commit is squashed into the first commit.
      $ git push origin <<branch name>> --force-with-lease
    * Create Pull Request.
    * After updating the Pull Request...
    * Switch to remote origin branch (ex. develop), pull for changes.
    * Switch to local branch then rebase, fix conflicts.
    * Push to remote branch.
      $ git push origin -u f<<branch name>> --force
      $ git push origin <<branch name>> --force-with-lease

    ------------------------------------
    GIT - Solving conflicts
    ------------------------------------
    conflicts applying a stash
    --
    * To get updated change, use "resolve using mine" when files have been modified on stash
    * To get stashed change,  use "resolve using theirs" when files have been modified on stash

    conflicts rebasing to remote
    --

    ------------------------------------
    GIT - Creating branches
    ------------------------------------

    * Create branch locally
      $ git branch <new-branch> // from current branch
      $ git branch <new-branch> <base-branch> // from any other than current

    * Create branch from remote
      $ git branch --track <new-branch> origin/<base-branch>
      //or
      $ git checkout --track origin/<base-branch>

    * Create branch from commit
      $ git branch <new-branch> <commit id>

    * Adds remote to existing local origin branch
      $ git branch -u origin/<remote-branch> // if there is a remote
      $ git push -u origin <local-branch> // if there is no remote yet

    * Get changed files between two branches
      $ git diff --name-status <base-branch> <working-branch>

    * List commit not pushed yet
      $ git log origin/<working-branch>..HEAD

    ------------------------------------
    GIT - Creating remote repository from existing local
    ------------------------------------
    $ create repository on github
    $ git remote add origin <remote repository URL>
    $ git push -f origin master

    ------------------------------------
    GIT - Cloning Local repository and resetting it
    ------------------------------------
    $ rm -rf .git
    $ git rm -r --cached .
    $ git init
    $ git add .
    $ git commit -m "Initial commit"

    ------------------------------------
    GIT - Cloning into existing directory
    ------------------------------------
    $ git clone <repository-url> ./

    ------------------------------------
    GIT - Remove last commit from remote (preferably feature/bugfix branches)
    ------------------------------------
    $ git reset --hard <previous commit ID> // local branch will be one behind
    $ git push --force

    ------------------------------------
    GIT - save credentials
    ------------------------------------
    git config --global credential.helper wincred

    ------------------------------------
    GIT - deploy on GitHup pages
    ------------------------------------
    $ yarn add gh-pages -D
    * Add in package.json ...
        {
            ...
            "homepage": "https://<user>.github.io/<app-name>/",
            ...
        }
        ...
        "scripts": {
            ...
            "predeploy": "npm run build",
            "deploy": "gh-pages -d build"
            ...
        }
    $ yarn deploy

//////////////////////////
// MVM
//////////////////////////

    ------------------------------------
    Basic commands
    ------------------------------------
    $ mvn clean install                     Clean installation
        -DskipTests                         Skip tests
        -Dskip.installyarn                  Skip Yarn
        -Dskip.installnodenpm               Skip node/npm

//////////////////////////
// MONGO
//////////////////////////

    ------------------------------------
    Basic commands
    ------------------------------------
    mongod                  - Starts 'mongo' daemon process
    mongod --dbpath <path>  - Starts 'mongo' daemon process with data specified path
    mongo                    - Starts 'mongo' client
    help                    - Shows help
    show dbs                - List existing data bases
    show collections        - List existing collections within data base in use
    use                     - Uses or creates a database to work with
                              * When new db is created won't be listed till data is stored
    insert                  - Inserts entries into the db. ex: db.dogs.insert({name:"Marley",type:"Perrito Asesino"})
    find                    - Finds entries.
                              ex: db.dogs.find() <<Finds all entries>>
                              ex: db.dogs.find({key:"value"}) <<Finds key/value matching pair>>
    pretty                  - shows formatted text
                              ex: db.dogs.find().pretty()
    update                  - Updates entries
                              ex: db.dogs.update({key:"value"},{$set:{keyB:"valueB"}}) <<updates key/value matching pair, and adds keyB/valueB pair to that entry>>
    deleteMany              - Removes entries
                              ex: db.dogs.deleteMany({name:"Marley",...}) <<Removes key/value matching pair >>
    drop                    - Removes entire collection from database
    remove                  - Removes contents inside a collection. ex: db.mycoll.remove({query here})


//////////////////////////
// HEROKU
//////////////////////////

    ------------------------------------
    Basic commands
    ------------------------------------
    $ heroku login                      log into heroku
    $ heroku login -i                   log into heroku interactive
    $ heroku create                     sends repository to Heroku server
    $ heroku remote -v                  Gets remote repository version
    $ git push heroku master            Pushes all commited changes to Heroku
    $ heroku logs                       To get logs and errors
    $ heroku run <command>              Runs CLI commands on Horoku server
    $ heroku config:set <VAR_NAME>      Sets global environment variable


//////////////////////////
// DEMANDWARE
//////////////////////////
    ------------------------------------
    DEMANDWARE - SENDING ORDER EMAILS
    ------------------------------------
    - Merchant Tools >  Ordering >  Orders > {Order ID}

    ------------------------------------
    DEMANDWARE - Adding reserved characters
    ------------------------------------
    ${'#'}

    ------------------------------------
    DEMANDWARE - Pdict Variables
    ------------------------------------
    Pipeline variables are defined in the controller that renders any given page.

    In BM is found in:
    Merchant Tools >  Site URLs >  URL Rules > Pipeline URLs

    IE. Alias: profile  Pipeline: Account-EditProfile

    - The alias is the last string in the site URL
    - The part of the Pipeleine string before the dash is the actual file controller
    - The part of the Pipeleine string after the dash is the function that renders that particular page.

    Inside the above mentioned function there will be following method that holds the pdict variables, or where they cab be defined:

    app.getView({
        varName: value
    }).render('account/password/setnewpassword');

    ---------------------------------------
    DEMANDWARE - REMOVE CHACHE
    ---------------------------------------
    Administration >  Sites >  Manage Sites > FR - General

    ---------------------------------------
    DEMANDWARE - ASSIGN PRODUCTS TO A CATEGOY - MAKE CATEGORY VISIBLE
    ---------------------------------------
    - Merchant Tools >  Products and Catalogs >  Catalogs > PMI Storefront Catalog FR > Store > Heets
        [x] - Online
    - Merchant Tools >  Products and Catalogs >  Catalogs > PMI Storefront Catalog FR > Store > Heets > Category Attributes
        [x] - Show in Menu Navigation
    - Merchant Tools >  Products and Catalogs >  Products > M0301-PCE-FR - General (Product)
        - [x] (Product) -> assign
        - [x] (Category) -> Next
        - Classification Category: (Category)
        - Primary Category: (Category)
        - Finish: Return to Products > >


    --------------------------------------
    DEMANDWARE - EXPORT CUSTOM PREFERENCES
    ---------------------------------------
    - Site imnport and export -> choose file name -> browse tree -> click on sitepreferences -> export

    --------------------------------------
    DEMANDWARE - PDICT VARIABLES
    ---------------------------------------
    templates/default/util/modules.isml

    - <iscomment>renders order details</iscomment>
        <ismodule template="components/order/orderdetails"
            name="orderdetails"
            attribute="order"
            attribute="orderstatus"
        />


    ---------------------------------------
    DEMANDWARE - CONDITIONALS SHORTHAND
    ---------------------------------------
    <ul class="${subCatLayout.horizontal ? 'menu-h' : 'menu-v'}">

    ------------------------------------
    DEMANDWARE - GENERATE STATIC URL
    ------------------------------------
    URLUtils.absStatic('/css/paynext.css')

    --------------------------------------
    DEMANDWARE - FORCE DECORATION TEMPLATE
    ---------------------------------------
    <iscontent type="text/html" charset="UTF-8" compact="true"/>
    <isset name="DecoratorTemplate" value="content/content/pt_content" scope="page"/>

    <iscomment>Use another decorator if the context is the content search</iscomment>
    <isif condition="${!empty(pdict.ContentSearchResult) && pdict.ContentSearchResult.count > 0}">
        <isset name="DecoratorTemplate" value="search/pt_contentsearchresult" scope="page"/>
    </isif>

    <isif condition="${pdict.CurrentHttpParameterMap.format.stringValue == 'ajax'}">
        <isset name="DecoratorTemplate" value="util/pt_empty" scope="page"/>
    </isif>


    --------------------------------------
    DEMANDWARE - URL TRIGGER
    ---------------------------------------
    URL TRIGGER:
    Static Page:
    <a href="$url('Page-Show','cid','privacy-policy', 'format', 'ajax')$">

    Category page:
    <a href="$url('Search-Show', 'cgid', 'accessories')$" class="button button-dark js-smgc-carousel-btn">구매하기</a>

    * To obtain url ID go to: Merchant Tools >  Site Preferences >  Storefront URL and disable "Enable Storefront URLs"

    --------------------------------------
    DEMANDWARE - URL INSIDE CONTENT ASSET
    ---------------------------------------
    $url('Stores-Find')$

    --------------------------------------
    DEMANDWARE - SOMETHING ELSE
    ---------------------------------------
    <link rel="stylesheet" href="${URLUtils.staticURL(URLUtils.CONTEXT_LIBRARY, null, 'css/content.css').toString()}" type="text/css"/>

    then just upload the file in (shared) library :
    \library\static\default\css

    ------------------------------------
    DEMANDWARE - ADDING CONTENT ASSET TO LIBRARY
    ------------------------------------
    1. In BM, Merchant tools > Content > Import and export > Exports (the link under the libraries title)
    2. Select the library you want to export. e.g FR_Library
    3. Add a name to the Export file field. eg. content.xml
    4. Hit Finish
    5. File will be created, click the link to download it (its an obvious link)
    Then, copy the asset into the correct library file
    and commit
    you can / should also test it, but deleting the asset, and doing another site import
    then your changes should be there again

    ------------------------------------
    DEMANDWARE - ERROR LOGS
    ------------------------------------
    Administration >  Site Development >  Development Setup

    ------------------------------------
    DEMANDWARE - TOOLKIT
    ------------------------------------
    site > Merchant Tools > SitePreferences > Storefront Toolkit.

    ------------------------------------
    DEMANDWARE - SITE CACHE
    ------------------------------------
    Administration >  Sites >  Manage Sites > FR - Cache

    ------------------------------------
    DEMANDWARE - LOCALIZATION FILE (Languages)
    ------------------------------------
    locale.properties

    ------------------------------------
    DEMANDWARE - REMOVE CONTENT ASSET WRAPPER
    ------------------------------------
    <iscontentasset aid="terms-pop-up" localinclude="${true}" />

    ------------------------------------
    DEMANDWARE - BASKET SESSION TIME
    ------------------------------------
    Merchant Tools >  Site Preferences >  Baskets

    ------------------------------------
    DEMANDWARE - INPUT FIELD CLASSES
    ------------------------------------
    inputField.js -> xhtml class
